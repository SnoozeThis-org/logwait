// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logwait

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnoozeThisLogsClient is the client API for SnoozeThisLogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnoozeThisLogsClient interface {
	Blah(ctx context.Context, opts ...grpc.CallOption) (SnoozeThisLogs_BlahClient, error)
}

type snoozeThisLogsClient struct {
	cc grpc.ClientConnInterface
}

func NewSnoozeThisLogsClient(cc grpc.ClientConnInterface) SnoozeThisLogsClient {
	return &snoozeThisLogsClient{cc}
}

func (c *snoozeThisLogsClient) Blah(ctx context.Context, opts ...grpc.CallOption) (SnoozeThisLogs_BlahClient, error) {
	stream, err := c.cc.NewStream(ctx, &SnoozeThisLogs_ServiceDesc.Streams[0], "/com.snoozethis.logwait.SnoozeThisLogs/Blah", opts...)
	if err != nil {
		return nil, err
	}
	x := &snoozeThisLogsBlahClient{stream}
	return x, nil
}

type SnoozeThisLogs_BlahClient interface {
	Send(*BlahRequest) error
	Recv() (*BlahResponse, error)
	grpc.ClientStream
}

type snoozeThisLogsBlahClient struct {
	grpc.ClientStream
}

func (x *snoozeThisLogsBlahClient) Send(m *BlahRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *snoozeThisLogsBlahClient) Recv() (*BlahResponse, error) {
	m := new(BlahResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnoozeThisLogsServer is the server API for SnoozeThisLogs service.
// All implementations should embed UnimplementedSnoozeThisLogsServer
// for forward compatibility
type SnoozeThisLogsServer interface {
	Blah(SnoozeThisLogs_BlahServer) error
}

// UnimplementedSnoozeThisLogsServer should be embedded to have forward compatible implementations.
type UnimplementedSnoozeThisLogsServer struct {
}

func (UnimplementedSnoozeThisLogsServer) Blah(SnoozeThisLogs_BlahServer) error {
	return status.Errorf(codes.Unimplemented, "method Blah not implemented")
}

// UnsafeSnoozeThisLogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnoozeThisLogsServer will
// result in compilation errors.
type UnsafeSnoozeThisLogsServer interface {
	mustEmbedUnimplementedSnoozeThisLogsServer()
}

func RegisterSnoozeThisLogsServer(s grpc.ServiceRegistrar, srv SnoozeThisLogsServer) {
	s.RegisterService(&SnoozeThisLogs_ServiceDesc, srv)
}

func _SnoozeThisLogs_Blah_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SnoozeThisLogsServer).Blah(&snoozeThisLogsBlahServer{stream})
}

type SnoozeThisLogs_BlahServer interface {
	Send(*BlahResponse) error
	Recv() (*BlahRequest, error)
	grpc.ServerStream
}

type snoozeThisLogsBlahServer struct {
	grpc.ServerStream
}

func (x *snoozeThisLogsBlahServer) Send(m *BlahResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *snoozeThisLogsBlahServer) Recv() (*BlahRequest, error) {
	m := new(BlahRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnoozeThisLogs_ServiceDesc is the grpc.ServiceDesc for SnoozeThisLogs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnoozeThisLogs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.snoozethis.logwait.SnoozeThisLogs",
	HandlerType: (*SnoozeThisLogsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Blah",
			Handler:       _SnoozeThisLogs_Blah_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "snoozethis.proto",
}
