syntax = "proto3";

package com.snoozethis.logwait;

option go_package = "github.com/SnoozeThis-org/logwait";

service SnoozeThisLogService {
	rpc Communicate(stream ObserverToSnoozeThis) returns (stream SnoozeThisToObserver) {}
}

message Filter {
	string field = 1;
	string regexp = 2;
}

message Observable {
	int64 id = 1;
	string signature = 2;
	repeated Filter filters = 3;
}

message RegisterObserverRequest {
	string url = 1;
	string log_instance_token = 2;
}

message RegisterObserverResponse {
	repeated Observable active_observables = 1;
}

message RejectObservable {
	int64 id = 1;
	string message = 2;
}

message ObserverToSnoozeThis {
	oneof msg {
		RegisterObserverRequest register = 1;
		int64 observed_observable = 2;
		RejectObservable reject_observable = 3;
	}
}

message SnoozeThisToObserver {
	oneof msg {
		RegisterObserverResponse register = 1;
		Observable new_observable = 2;
		int64 cancel_observable = 3;
	}
}

service ObserverService {
	rpc Communicate(stream ScannerToObserver) returns (stream ObserverToScanner) {}
}

message RegisterScannerRequest {
}

message RegisterScannerResponse {
	repeated Observable active_observables = 1;
}

message ScannerToObserver {
	oneof msg {
		RegisterScannerRequest register = 1;
		int64 observed_observable = 2;
	}
}

message ObserverToScanner {
	oneof msg {
		RegisterScannerResponse register = 1;
		Observable new_observable = 2;
		int64 cancel_observable = 3;
	}
}
