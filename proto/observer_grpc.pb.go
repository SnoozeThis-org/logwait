// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: observer.proto

package logwait

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnoozeThisLogServiceClient is the client API for SnoozeThisLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnoozeThisLogServiceClient interface {
	Communicate(ctx context.Context, opts ...grpc.CallOption) (SnoozeThisLogService_CommunicateClient, error)
}

type snoozeThisLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSnoozeThisLogServiceClient(cc grpc.ClientConnInterface) SnoozeThisLogServiceClient {
	return &snoozeThisLogServiceClient{cc}
}

func (c *snoozeThisLogServiceClient) Communicate(ctx context.Context, opts ...grpc.CallOption) (SnoozeThisLogService_CommunicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &SnoozeThisLogService_ServiceDesc.Streams[0], "/com.snoozethis.logwait.SnoozeThisLogService/Communicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &snoozeThisLogServiceCommunicateClient{stream}
	return x, nil
}

type SnoozeThisLogService_CommunicateClient interface {
	Send(*ObserverToSnoozeThis) error
	Recv() (*SnoozeThisToObserver, error)
	grpc.ClientStream
}

type snoozeThisLogServiceCommunicateClient struct {
	grpc.ClientStream
}

func (x *snoozeThisLogServiceCommunicateClient) Send(m *ObserverToSnoozeThis) error {
	return x.ClientStream.SendMsg(m)
}

func (x *snoozeThisLogServiceCommunicateClient) Recv() (*SnoozeThisToObserver, error) {
	m := new(SnoozeThisToObserver)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnoozeThisLogServiceServer is the server API for SnoozeThisLogService service.
// All implementations should embed UnimplementedSnoozeThisLogServiceServer
// for forward compatibility
type SnoozeThisLogServiceServer interface {
	Communicate(SnoozeThisLogService_CommunicateServer) error
}

// UnimplementedSnoozeThisLogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSnoozeThisLogServiceServer struct {
}

func (UnimplementedSnoozeThisLogServiceServer) Communicate(SnoozeThisLogService_CommunicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Communicate not implemented")
}

// UnsafeSnoozeThisLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnoozeThisLogServiceServer will
// result in compilation errors.
type UnsafeSnoozeThisLogServiceServer interface {
	mustEmbedUnimplementedSnoozeThisLogServiceServer()
}

func RegisterSnoozeThisLogServiceServer(s grpc.ServiceRegistrar, srv SnoozeThisLogServiceServer) {
	s.RegisterService(&SnoozeThisLogService_ServiceDesc, srv)
}

func _SnoozeThisLogService_Communicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SnoozeThisLogServiceServer).Communicate(&snoozeThisLogServiceCommunicateServer{stream})
}

type SnoozeThisLogService_CommunicateServer interface {
	Send(*SnoozeThisToObserver) error
	Recv() (*ObserverToSnoozeThis, error)
	grpc.ServerStream
}

type snoozeThisLogServiceCommunicateServer struct {
	grpc.ServerStream
}

func (x *snoozeThisLogServiceCommunicateServer) Send(m *SnoozeThisToObserver) error {
	return x.ServerStream.SendMsg(m)
}

func (x *snoozeThisLogServiceCommunicateServer) Recv() (*ObserverToSnoozeThis, error) {
	m := new(ObserverToSnoozeThis)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnoozeThisLogService_ServiceDesc is the grpc.ServiceDesc for SnoozeThisLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SnoozeThisLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.snoozethis.logwait.SnoozeThisLogService",
	HandlerType: (*SnoozeThisLogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Communicate",
			Handler:       _SnoozeThisLogService_Communicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "observer.proto",
}
