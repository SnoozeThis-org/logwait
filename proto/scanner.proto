syntax = "proto3";

package com.snoozethis.logwait;

option go_package = "github.com/SnoozeThis-org/logwait/proto";

import "logwait_common.proto";

service ObserverService {
	rpc Communicate(stream ScannerToObserver) returns (stream ObserverToScanner) {}
}

message RegisterScannerRequest {
	// All scanners to one observer should be the same binary, for example so that they all understand the same filters. This is enforced by them needing to send their type (e.g. "syslog") to the observer which checks they're all the same.
	string scanner_type = 1;
}

message RegisterScannerResponse {
	repeated Observable active_observables = 1;
}

message ScannerToObserver {
	oneof msg {
		RegisterScannerRequest register = 1;
		string observed_observable = 2;
		RejectObservable reject_observable = 3;
	}
}

message ObserverToScanner {
	oneof msg {
		RegisterScannerResponse register = 1;
		Observable new_observable = 2;
		string cancel_observable = 3;
	}
}
