// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: scanner.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterScannerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All scanners to one observer should be the same binary, for example so that they all understand the same filters. This is enforced by them needing to send their type (e.g. "syslog") to the observer which checks they're all the same.
	ScannerType string `protobuf:"bytes,1,opt,name=scanner_type,json=scannerType,proto3" json:"scanner_type,omitempty"`
}

func (x *RegisterScannerRequest) Reset() {
	*x = RegisterScannerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterScannerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterScannerRequest) ProtoMessage() {}

func (x *RegisterScannerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterScannerRequest.ProtoReflect.Descriptor instead.
func (*RegisterScannerRequest) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterScannerRequest) GetScannerType() string {
	if x != nil {
		return x.ScannerType
	}
	return ""
}

type RegisterScannerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveObservables []*Observable `protobuf:"bytes,1,rep,name=active_observables,json=activeObservables,proto3" json:"active_observables,omitempty"`
}

func (x *RegisterScannerResponse) Reset() {
	*x = RegisterScannerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterScannerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterScannerResponse) ProtoMessage() {}

func (x *RegisterScannerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterScannerResponse.ProtoReflect.Descriptor instead.
func (*RegisterScannerResponse) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterScannerResponse) GetActiveObservables() []*Observable {
	if x != nil {
		return x.ActiveObservables
	}
	return nil
}

type TestFiltersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId  int64     `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Filters []*Filter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *TestFiltersRequest) Reset() {
	*x = TestFiltersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFiltersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFiltersRequest) ProtoMessage() {}

func (x *TestFiltersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFiltersRequest.ProtoReflect.Descriptor instead.
func (*TestFiltersRequest) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{2}
}

func (x *TestFiltersRequest) GetTestId() int64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *TestFiltersRequest) GetFilters() []*Filter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type TestFiltersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestId int64    `protobuf:"varint,1,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Errors []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *TestFiltersResponse) Reset() {
	*x = TestFiltersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestFiltersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestFiltersResponse) ProtoMessage() {}

func (x *TestFiltersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestFiltersResponse.ProtoReflect.Descriptor instead.
func (*TestFiltersResponse) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{3}
}

func (x *TestFiltersResponse) GetTestId() int64 {
	if x != nil {
		return x.TestId
	}
	return 0
}

func (x *TestFiltersResponse) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ScannerToObserver struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//	*ScannerToObserver_Register
	//	*ScannerToObserver_ObservedObservable
	//	*ScannerToObserver_RejectObservable
	//	*ScannerToObserver_TestFilters
	Msg isScannerToObserver_Msg `protobuf_oneof:"msg"`
}

func (x *ScannerToObserver) Reset() {
	*x = ScannerToObserver{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScannerToObserver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScannerToObserver) ProtoMessage() {}

func (x *ScannerToObserver) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScannerToObserver.ProtoReflect.Descriptor instead.
func (*ScannerToObserver) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{4}
}

func (m *ScannerToObserver) GetMsg() isScannerToObserver_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *ScannerToObserver) GetRegister() *RegisterScannerRequest {
	if x, ok := x.GetMsg().(*ScannerToObserver_Register); ok {
		return x.Register
	}
	return nil
}

func (x *ScannerToObserver) GetObservedObservable() string {
	if x, ok := x.GetMsg().(*ScannerToObserver_ObservedObservable); ok {
		return x.ObservedObservable
	}
	return ""
}

func (x *ScannerToObserver) GetRejectObservable() *RejectObservable {
	if x, ok := x.GetMsg().(*ScannerToObserver_RejectObservable); ok {
		return x.RejectObservable
	}
	return nil
}

func (x *ScannerToObserver) GetTestFilters() *TestFiltersResponse {
	if x, ok := x.GetMsg().(*ScannerToObserver_TestFilters); ok {
		return x.TestFilters
	}
	return nil
}

type isScannerToObserver_Msg interface {
	isScannerToObserver_Msg()
}

type ScannerToObserver_Register struct {
	Register *RegisterScannerRequest `protobuf:"bytes,1,opt,name=register,proto3,oneof"`
}

type ScannerToObserver_ObservedObservable struct {
	ObservedObservable string `protobuf:"bytes,2,opt,name=observed_observable,json=observedObservable,proto3,oneof"`
}

type ScannerToObserver_RejectObservable struct {
	RejectObservable *RejectObservable `protobuf:"bytes,3,opt,name=reject_observable,json=rejectObservable,proto3,oneof"`
}

type ScannerToObserver_TestFilters struct {
	TestFilters *TestFiltersResponse `protobuf:"bytes,4,opt,name=test_filters,json=testFilters,proto3,oneof"`
}

func (*ScannerToObserver_Register) isScannerToObserver_Msg() {}

func (*ScannerToObserver_ObservedObservable) isScannerToObserver_Msg() {}

func (*ScannerToObserver_RejectObservable) isScannerToObserver_Msg() {}

func (*ScannerToObserver_TestFilters) isScannerToObserver_Msg() {}

type ObserverToScanner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//	*ObserverToScanner_Register
	//	*ObserverToScanner_NewObservable
	//	*ObserverToScanner_CancelObservable
	//	*ObserverToScanner_TestFilters
	Msg isObserverToScanner_Msg `protobuf_oneof:"msg"`
}

func (x *ObserverToScanner) Reset() {
	*x = ObserverToScanner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scanner_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObserverToScanner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObserverToScanner) ProtoMessage() {}

func (x *ObserverToScanner) ProtoReflect() protoreflect.Message {
	mi := &file_scanner_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObserverToScanner.ProtoReflect.Descriptor instead.
func (*ObserverToScanner) Descriptor() ([]byte, []int) {
	return file_scanner_proto_rawDescGZIP(), []int{5}
}

func (m *ObserverToScanner) GetMsg() isObserverToScanner_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *ObserverToScanner) GetRegister() *RegisterScannerResponse {
	if x, ok := x.GetMsg().(*ObserverToScanner_Register); ok {
		return x.Register
	}
	return nil
}

func (x *ObserverToScanner) GetNewObservable() *Observable {
	if x, ok := x.GetMsg().(*ObserverToScanner_NewObservable); ok {
		return x.NewObservable
	}
	return nil
}

func (x *ObserverToScanner) GetCancelObservable() string {
	if x, ok := x.GetMsg().(*ObserverToScanner_CancelObservable); ok {
		return x.CancelObservable
	}
	return ""
}

func (x *ObserverToScanner) GetTestFilters() *TestFiltersRequest {
	if x, ok := x.GetMsg().(*ObserverToScanner_TestFilters); ok {
		return x.TestFilters
	}
	return nil
}

type isObserverToScanner_Msg interface {
	isObserverToScanner_Msg()
}

type ObserverToScanner_Register struct {
	Register *RegisterScannerResponse `protobuf:"bytes,1,opt,name=register,proto3,oneof"`
}

type ObserverToScanner_NewObservable struct {
	NewObservable *Observable `protobuf:"bytes,2,opt,name=new_observable,json=newObservable,proto3,oneof"`
}

type ObserverToScanner_CancelObservable struct {
	CancelObservable string `protobuf:"bytes,3,opt,name=cancel_observable,json=cancelObservable,proto3,oneof"`
}

type ObserverToScanner_TestFilters struct {
	TestFilters *TestFiltersRequest `protobuf:"bytes,4,opt,name=test_filters,json=testFilters,proto3,oneof"`
}

func (*ObserverToScanner_Register) isObserverToScanner_Msg() {}

func (*ObserverToScanner_NewObservable) isObserverToScanner_Msg() {}

func (*ObserverToScanner_CancelObservable) isObserverToScanner_Msg() {}

func (*ObserverToScanner_TestFilters) isObserverToScanner_Msg() {}

var File_scanner_proto protoreflect.FileDescriptor

var file_scanner_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x6c, 0x6f, 0x67, 0x77, 0x61, 0x69, 0x74, 0x1a, 0x14, 0x6c, 0x6f, 0x67, 0x77, 0x61, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a,
	0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6c, 0x0a, 0x17, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x77, 0x61, 0x69, 0x74, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x77, 0x61, 0x69,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x46, 0x0a, 0x13, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xc6, 0x02, 0x0a, 0x11, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x4c, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x77, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a,
	0x13, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x57, 0x0a, 0x11, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6c, 0x6f, 0x67,
	0x77, 0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x74, 0x65, 0x73,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x6c, 0x6f, 0x67, 0x77, 0x61, 0x69, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x22, 0xb6, 0x02, 0x0a, 0x11, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x6f, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x77,
	0x61, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x6c, 0x6f, 0x67, 0x77, 0x61, 0x69, 0x74, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x77, 0x61,
	0x69, 0x74, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x32, 0x7c, 0x0a, 0x0f, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69,
	0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6c,
	0x6f, 0x67, 0x77, 0x61, 0x69, 0x74, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x6f,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x73,
	0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6c, 0x6f, 0x67, 0x77, 0x61, 0x69,
	0x74, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x6e, 0x6f, 0x6f, 0x7a, 0x65, 0x54, 0x68,
	0x69, 0x73, 0x2d, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x6f, 0x67, 0x77, 0x61, 0x69, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scanner_proto_rawDescOnce sync.Once
	file_scanner_proto_rawDescData = file_scanner_proto_rawDesc
)

func file_scanner_proto_rawDescGZIP() []byte {
	file_scanner_proto_rawDescOnce.Do(func() {
		file_scanner_proto_rawDescData = protoimpl.X.CompressGZIP(file_scanner_proto_rawDescData)
	})
	return file_scanner_proto_rawDescData
}

var file_scanner_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_scanner_proto_goTypes = []interface{}{
	(*RegisterScannerRequest)(nil),  // 0: com.snoozethis.logwait.RegisterScannerRequest
	(*RegisterScannerResponse)(nil), // 1: com.snoozethis.logwait.RegisterScannerResponse
	(*TestFiltersRequest)(nil),      // 2: com.snoozethis.logwait.TestFiltersRequest
	(*TestFiltersResponse)(nil),     // 3: com.snoozethis.logwait.TestFiltersResponse
	(*ScannerToObserver)(nil),       // 4: com.snoozethis.logwait.ScannerToObserver
	(*ObserverToScanner)(nil),       // 5: com.snoozethis.logwait.ObserverToScanner
	(*Observable)(nil),              // 6: com.snoozethis.logwait.Observable
	(*Filter)(nil),                  // 7: com.snoozethis.logwait.Filter
	(*RejectObservable)(nil),        // 8: com.snoozethis.logwait.RejectObservable
}
var file_scanner_proto_depIdxs = []int32{
	6, // 0: com.snoozethis.logwait.RegisterScannerResponse.active_observables:type_name -> com.snoozethis.logwait.Observable
	7, // 1: com.snoozethis.logwait.TestFiltersRequest.filters:type_name -> com.snoozethis.logwait.Filter
	0, // 2: com.snoozethis.logwait.ScannerToObserver.register:type_name -> com.snoozethis.logwait.RegisterScannerRequest
	8, // 3: com.snoozethis.logwait.ScannerToObserver.reject_observable:type_name -> com.snoozethis.logwait.RejectObservable
	3, // 4: com.snoozethis.logwait.ScannerToObserver.test_filters:type_name -> com.snoozethis.logwait.TestFiltersResponse
	1, // 5: com.snoozethis.logwait.ObserverToScanner.register:type_name -> com.snoozethis.logwait.RegisterScannerResponse
	6, // 6: com.snoozethis.logwait.ObserverToScanner.new_observable:type_name -> com.snoozethis.logwait.Observable
	2, // 7: com.snoozethis.logwait.ObserverToScanner.test_filters:type_name -> com.snoozethis.logwait.TestFiltersRequest
	4, // 8: com.snoozethis.logwait.ObserverService.Communicate:input_type -> com.snoozethis.logwait.ScannerToObserver
	5, // 9: com.snoozethis.logwait.ObserverService.Communicate:output_type -> com.snoozethis.logwait.ObserverToScanner
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_scanner_proto_init() }
func file_scanner_proto_init() {
	if File_scanner_proto != nil {
		return
	}
	file_logwait_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_scanner_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterScannerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterScannerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFiltersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestFiltersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScannerToObserver); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scanner_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObserverToScanner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_scanner_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ScannerToObserver_Register)(nil),
		(*ScannerToObserver_ObservedObservable)(nil),
		(*ScannerToObserver_RejectObservable)(nil),
		(*ScannerToObserver_TestFilters)(nil),
	}
	file_scanner_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ObserverToScanner_Register)(nil),
		(*ObserverToScanner_NewObservable)(nil),
		(*ObserverToScanner_CancelObservable)(nil),
		(*ObserverToScanner_TestFilters)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scanner_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_scanner_proto_goTypes,
		DependencyIndexes: file_scanner_proto_depIdxs,
		MessageInfos:      file_scanner_proto_msgTypes,
	}.Build()
	File_scanner_proto = out.File
	file_scanner_proto_rawDesc = nil
	file_scanner_proto_goTypes = nil
	file_scanner_proto_depIdxs = nil
}
